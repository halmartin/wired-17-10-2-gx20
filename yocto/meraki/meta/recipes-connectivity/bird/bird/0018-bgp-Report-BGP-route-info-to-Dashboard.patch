diff --git a/proto/meraki/meraki.c b/proto/meraki/meraki.c
index 16758cfc..2dc26a9b 100644
--- a/proto/meraki/meraki.c
+++ b/proto/meraki/meraki.c
@@ -17,12 +17,86 @@
 #include "filter/filter.h"
 #include "lib/ip.h"
 #include "lib/string.h"
+#include "proto/bgp/bgp.h"
 
 #include "meraki.h"
 
 #include <stdio.h>
 
 #define BIRD_EXPORTED_ROUTE_BEGIN 100000 //see meraki/wired_brain.cc
+#define ASPATH_BUF_LEN 512
+//Accommodate worst-case nexthop size
+#define NEXTHOP_BUF_LEN sizeof("[\"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx\", "\
+                               "\"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx\"]")
+
+void
+collect_bgp_info(rte *e, FILE *fp, const char* fname)
+{
+    ea_list *attrs = e->attrs->eattrs;
+    byte as_path[ASPATH_BUF_LEN];
+    char origin;
+
+    eattr *origin_attr = ea_find(attrs, EA_CODE(EAP_BGP, BA_ORIGIN));
+    eattr *aspath_attr = ea_find(attrs, EA_CODE(EAP_BGP, BA_AS_PATH));
+    eattr *nexthop_attr = ea_find(attrs, EA_CODE(EAP_BGP, BA_NEXT_HOP));
+    eattr *localpref_attr = ea_find(attrs, EA_CODE(EAP_BGP, BA_LOCAL_PREF));
+
+    /* If any of the file writes fail the Json emitted will be malformed
+     * or incomplete. Thus returning early in these cases. The consumer of
+     * json i.e. poder_agent has been programmed to handle malformed json.
+     */
+    // Extracting the origin attribute
+    switch (origin_attr->u.data) {
+        case ORIGIN_IGP:
+            origin = 'i';
+            break;
+        case ORIGIN_EGP:
+            origin = 'e';
+            break;
+        case ORIGIN_INCOMPLETE:
+        default:
+            origin = '?';
+            break;
+    }
+    if (0 > fprintf(fp, "\"bgp_info\" :{"
+                        "\"origin\" : \"%c\",",
+                        origin)) {
+        log("failed to write to %s!", fname);
+        return;
+    }
+
+    // Extracting the as path
+    as_path_format(aspath_attr->u.ptr, as_path, ASPATH_BUF_LEN);
+    if (0 > fprintf(fp, "\"aspath\" : \"%s\",", as_path)) {
+        log("failed to write to %s!", fname);
+        return;
+    }
+
+    // Extracting the nexthop IP address
+    ip_addr *ipp = (ip_addr *) nexthop_attr->u.ptr->data;
+    byte nexthop[NEXTHOP_BUF_LEN];
+#ifdef IPV6
+    // In IPv6, we might have two addresses in NEXT HOP
+    if ((nexthop_attr->u.ptr->length == NEXT_HOP_LENGTH)
+            && ipa_nonzero(ipp[1])) {
+        bsprintf(nexthop, "[\"%I\", \"%I\"]", ipp[0], ipp[1]);
+    } else {
+        bsprintf(nexthop, "[\"%I\"]", ipp[0]);
+    }
+#else
+    bsprintf(nexthop, "[\"%I\"]", ipp[0]);
+#endif
+    if (0 > fprintf(fp, "\"nexthop\" : %s,", nexthop)) {
+        log("failed to write to %s!", fname);
+        return;
+    }
+
+    // Extracting the localpref attribute
+    if (0 > fprintf(fp, "\"localpref\" : %u }", localpref_attr->u.data)) {
+        log("failed to write to %s!", fname);
+        return;
+    }
+}
 
 static void
 meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new, rte *old, ea_list *attrs)
@@ -34,16 +108,30 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new, rte *old, ea
    const char* outfile = "/tmp/config.tmp";
 
    FILE *out = fopen(outfile_tmp, "w");
-   if (!outfile) {
+   if (!out) {
       log("unable to open %s\n", outfile_tmp);
       return;
    }
 
+   const char* info_outfile_tmp = "/tmp/bird_routes.json.tmp";
+   const char* info_outfile = "/tmp/bird_routes.json";
+   int is_bgp_route = 0;
+
+   FILE *info_out = fopen(info_outfile_tmp, "w");
+   if (!info_out) {
+      log("unable to open %s\n", info_outfile_tmp);
+      // Not returning since writing this file is not critical
+   } else {
+       if (0 > fprintf(info_out,"{ \"routes\" : [")) {
+           log("failed to write to %s!", info_outfile_tmp);
+       }
+   }
+
    FIB_WALK(&src_table->fib, fn)
    {
        n = (net *) fn;
        rte *e;
-       for(e = n->routes; e; e=e->next) {
+       for (e = n->routes; e; e=e->next) {
            if (e->net->routes != e) {
                //route is not "primary", ie it should not forward traffic
                continue;
@@ -53,6 +141,7 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new, rte *old, ea
 #else
            ip4_ntop(n->n.prefix, ip_buf);
 #endif
+           is_bgp_route = 0;
            if (sscanf(e->attrs->src->proto->name, "peer%u", &peer_num) > 0) {
                if (0 > fprintf(out,
                            "route%u:subnet %s/%2d\n"
@@ -64,6 +153,7 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new, rte *old, ea
                    log("failed to write to %s!", outfile_tmp);
                }
                route_count++;
+               is_bgp_route = 1;
            } else if (sscanf(e->attrs->src->proto->name, "neighbor%u", &peer_num) > 0) {
                if (0 > fprintf(out,
                            "route%u:subnet %s/%2d\n"
@@ -77,16 +167,45 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new, rte *old, ea
                    log("failed to write to %s!", outfile_tmp);
                }
                route_count++;
+               is_bgp_route = 1;
+           }
+
+           if (info_out && is_bgp_route) {
+               if (0 > fprintf(info_out,
+                           "{ \"prefix\" : \"%s\", "
+                           "\"prefix_len\" : %d, "
+                           "\"nexthops\" : [ "
+                           "{\"src\" : \"BGP\",",
+                           ip_buf, n->n.pxlen)) {
+                   log("failed to write to %s!", info_outfile_tmp);
+               }
+               collect_bgp_info(e, info_out, info_outfile_tmp);
+               if (0 > fprintf(info_out, " }] }\n,")) {
+                   log("failed to write to %s!", info_outfile_tmp);
+               }
            }
        }
    }
    FIB_WALK_END;
 
    fclose(out);
-
-   log("%s: updating config file with %d routes", P->name, route_count - BIRD_EXPORTED_ROUTE_BEGIN);
-
+   log("%s: updating config file with %d routes", P->name,
+       route_count - BIRD_EXPORTED_ROUTE_BEGIN);
    rename(outfile_tmp, outfile);
+
+   if (info_out) {
+       // To remove the trailing ',' when atleast one route info is written
+       if (route_count > BIRD_EXPORTED_ROUTE_BEGIN) {
+           fseek(info_out, -1, SEEK_CUR);
+       }
+       if (0 > fprintf(info_out,"] }")) {
+           log("failed to write to %s!", info_outfile_tmp);
+       }
+       fclose(info_out);
+       log("%s: updating route info file with %d routes", P->name,
+               route_count - BIRD_EXPORTED_ROUTE_BEGIN);
+       rename(info_outfile_tmp, info_outfile);
+   }
 }
 
 
-- 
2.22.0

