diff --git a/proto/meraki/Makefile b/proto/meraki/Makefile
index 6e6d69e7..4eee1855 100644
--- a/proto/meraki/Makefile
+++ b/proto/meraki/Makefile
@@ -1,4 +1,4 @@
-source=meraki.c
+source=meraki.c meraki_gw.c
 root-rel=../../
 dir-name=proto/meraki
 
diff --git a/proto/meraki/meraki.c b/proto/meraki/meraki.c
index 685c3f6e..f2ccbc6a 100644
--- a/proto/meraki/meraki.c
+++ b/proto/meraki/meraki.c
@@ -20,6 +20,7 @@
 #include "proto/bgp/bgp.h"
 
 #include "meraki.h"
+#include "meraki_gw.h"
 #include "meraki_bird_defines.hh"
 
 #include <stdio.h>
@@ -118,7 +119,9 @@ static void
 meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new UNUSED, rte *old UNUSED, ea_list *attrs UNUSED)
 {
    unsigned peer_num, route_count = BIRD_EXPORTED_ROUTE_BEGIN;
+   unsigned gw_count = BIRD_EXPORTED_GATEWAY_BEGIN;
    char ip_buf[STD_ADDRESS_P_LENGTH], source_key[BGP_SOURCE_KEY_LEN];
+   list meraki_gw_list;
 
    const char* outfile_tmp = BIRD_ROUTES_EXPORT_FILE ".tmp";
    const char* outfile = BIRD_ROUTES_EXPORT_FILE;
@@ -143,6 +146,9 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new UNUSED, rte *
        }
    }
 
+   // Keep track of all gateways.
+   init_list(&meraki_gw_list);
+
    FIB_WALK(&src_table->fib, fn)
    {
        n = (net *) fn;
@@ -178,6 +184,26 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new UNUSED, rte *
                route_count++;
                is_bgp_route = 1;
            } else if (sscanf(e->attrs->src->proto->name, "neighbor%u", &peer_num) > 0) {
+               // Find or create a gateway
+               struct meraki_gw *mgw = meraki_gw_find(&meraki_gw_list, e->attrs->gw);
+               if (mgw == NULL) {
+                   char gw_buf[STD_ADDRESS_P_LENGTH];
+
+                   // A new gateway to configure.
+                   mgw = meraki_gw_create(P, e->attrs->gw, gw_count);
+                   meraki_gw_add(&meraki_gw_list, mgw);
+                   gw_count++;
+#ifdef IPV6
+                   ip6_ntop(e->attrs->gw, gw_buf);
+#else
+                   ip4_ntop(e->attrs->gw, gw_buf);
+#endif
+                   if (0 > fprintf(out, "gateway%u:address %s\n",
+                                   mgw->gw_num, gw_buf)) {
+                       log("failed to write to %s!", outfile_tmp);
+                   }
+               }
+
                get_bgp_source_key(e, source_key, BGP_SOURCE_KEY_LEN, 'E');
                if (0 > fprintf(out,
                            "route%u:subnet %s/%d\n"
@@ -189,7 +215,7 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new UNUSED, rte *
                            "vpn_joined_subnet%u:subnet %s/%d\n",
                            route_count, ip_buf, n->n.pxlen,
                            route_count,
-                           route_count, peer_num,
+                           route_count, mgw->gw_num,
                            route_count, BIRD_EXPORTED_ROUTE_METRIC,
                            route_count,
                            route_count, source_key,
@@ -237,6 +263,9 @@ meraki_notify(struct proto *P, rtable *src_table, net *n, rte *new UNUSED, rte *
                route_count - BIRD_EXPORTED_ROUTE_BEGIN);
        rename(info_outfile_tmp, info_outfile);
    }
+
+   // Forget all gateways.
+   meraki_gw_purge(&meraki_gw_list);
 }
 
 
diff --git a/proto/meraki/meraki_gw.c b/proto/meraki/meraki_gw.c
new file mode 100644
index 00000000..e424b93e
--- /dev/null
+++ b/proto/meraki/meraki_gw.c
@@ -0,0 +1,43 @@
+#include "nest/bird.h"
+#include "nest/protocol.h"
+#include "meraki_gw.h"
+
+struct meraki_gw *
+meraki_gw_find(list *gw_list, ip_addr gw)
+{
+    struct meraki_gw *mgw;
+
+    WALK_LIST(mgw, *gw_list) {
+        if (mgw->gw == gw) {
+            return mgw;
+        }
+    }
+
+    return NULL;
+}
+
+struct meraki_gw *
+meraki_gw_create(struct proto *p, ip_addr gw, unsigned int gw_num)
+{
+    struct meraki_gw *mgw = mb_allocz(p->pool, sizeof(struct meraki_gw));
+    mgw->gw = gw;
+    mgw->gw_num = gw_num;
+
+    return mgw;
+}
+
+void
+meraki_gw_add(list *gw_list, struct meraki_gw *gw)
+{
+    add_tail(gw_list, &gw->n);
+}
+
+void
+meraki_gw_purge(list *gw_list)
+{
+    struct meraki_gw *mgw, *next_mgw;
+    WALK_LIST_DELSAFE(mgw, next_mgw, *gw_list) {
+        rem_node(&mgw->n);
+    }
+}
+
diff --git a/proto/meraki/meraki_gw.h b/proto/meraki/meraki_gw.h
new file mode 100644
index 00000000..decf8d7e
--- /dev/null
+++ b/proto/meraki/meraki_gw.h
@@ -0,0 +1,19 @@
+#ifndef _BIRD_MERAKI_GW_H_
+#define _BIRD_MERAKI_GW_H_
+
+// Keeping track of Meraki gateways
+
+// Information about a Meraki gateway
+struct meraki_gw {
+    node n;             // linkage
+    ip_addr gw;         // the address of the gateway
+    unsigned gw_num;    // the number of the gateway
+};
+
+extern struct meraki_gw *meraki_gw_find(list *gw_list, ip_addr gw);
+extern struct meraki_gw *meraki_gw_create(struct proto *p, ip_addr gw,
+                                          unsigned int gw_num);
+extern void meraki_gw_add(list *gw_list, struct meraki_gw *gw);
+extern void meraki_gw_purge(list *gw_list);
+
+#endif
-- 
2.22.0

